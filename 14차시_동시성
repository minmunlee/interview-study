## ✏️ 동시성


<details>
  <summary>동시성이 발생할 경우 여러개의 스레드가 같은 자원에 대한 경쟁 상태라는 문제점이 발생하게 되는데 이 경쟁 상태의 원인이 무엇이라고 생각하시나요?</summary> 
  
  - 원자성
    - 공유 자원에 대한 작업단위가 더이상 쪼갤수 없는 하나의 연산인 것처럼 동작하는 것
    - 수행하려는 작업이 여러개로 쪼개어져서 원자성을 보장 받지 못해 경쟁 상태가 발생한다.
  - 가시성
    - 공유 자원에 반영된 값을 여러 스레드에서 볼 수 있어야 하는 것
    - 쓰기 작업을 할 때 일반적으로 CPU Cache를 사용하게 되는데 이미 한 스레드에서 하나의 값을 바꾼 상태로 CPU Cache에 저장했다면 다른 스레드가 값을 수정하여 반영한다 해도 이미 CPU Cache에 있기 때문에 다른 스레드에서 변경 값을 보지 못하는 문제가 발생한다.
</details>

<details>
  <summary>Spring에서 @Transactional 어노테이션이 붙어 있는 메서드에 synchronized를 사용할 경우 동시성 제어 문제가 발생하는데 그 이유와 해결 방법을 설명해주세요.</summary> 

  DB에서 지닌 값이 @Transactional 어노테이션에 의해서 영속성 컨텍스트에 영속 상태로 있게 되는데 해당 메서드는 트랜잭션이 commit 된 다음 flush 하는 과정에서 DB에 반영이 되기 때문에 값이 변하지 않고 동시성 문제가 발생합니다.

  해결방안으로는 트랜잭션 내의 엔티티를 명시적으로 flush 하는 방법과 @Transactional 을 주석처리하고 JPA Repository 의 save() 메서드를 사용하는 방법이 있습니다.

</details>

<details>
  <summary>동시성과 병렬성의 차이에 대해 설명해주세요.</summary> 

  동시성은 동시에 여러 스레드가 진행된다기 보다는 싱글 코어에서 여러 개의 스레드가 빠르게 번갈아가며 실행하는 것이고, 병렬성은 멀티 코어에서 한개 이상의 스레드를 포함하는 각각의 코어들을 동시에 실행하는 것입니다.  
</details>

<details>
  <summary>동시성 문제란 무엇인지에 대해 예시를 들어 설명해 주세요.</summary> 

  동시성 문제란 동일한 데이터에 동시에 접근해 데이터 정합성이 깨지는 문제를 말하며 예를 들어 100개의 티켓을 판매하는 데 100개의 서버에서 동시에 재고를 하나씩 감소시킬 경우, 각 서버의 읽은 시점의 티켓 매수가 동일하기 때문에 갱신이 누락되는 상황이 발생할 수 있습니다.
</details>

<details>
  <summary>동시성 문제를 해결하기 위한 방법 중 낙관적 락과 비관적 락의 차이에 대해 설명해 주세요</summary> 

  비관적 락은 모든 트랙젝션을 충돌이 난다고 가정해 락을 걸어 다른 트랜잭션이 동시에 동일한 데이터에 접근하거나 수정하지 못하도록 하는 방법입니다. 다른 트랜잭션을 락이 해제되기 전까지 데이터를 가져갈 수 없습니다. 데이터에 별도의 락을 걸기 때문에 조회가 많이 일어날 경우 성능이 저하될 수 있다는 단점이 있습니다.

  낙관적 락은 버전 관리를 통해 데이터 정합성을 맞추는 방법으로 데이터를 읽은 후, 업데이트를 수행할 때 처음 읽었던 버전과 일치하는지 확인하는 방법입니다. 업데이트 실패 시의 로직을 직접 작성해야 하는 단점이 있습니다.
</details>

<details>
  <summary>synchronized를 사용해 동시성을 제어할 시의 문제점에 대해 설명해 주세요.</summary> 

  Sychronized란 스레드 동기화를 위해 자바에서 지원하는 기술로 하나의 스레드가 자원에 접근 시 다른 스레드에서는 접근하지 못하게 막아줌으로 동시성을 제어할 수 있는데, 이는 하나의 프로세스에서만 지원되기 때문에 여러 서버에서 접근할 경우에 제대로 작동하지 않는다.
</details>

----

<details>
  <summary>참고</summary> 
</details>
